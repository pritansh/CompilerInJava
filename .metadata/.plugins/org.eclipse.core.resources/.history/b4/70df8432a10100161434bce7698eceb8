package pc.compiler;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

import pc.compiler.errors.VariableAlreadyDefined;
import pc.compiler.errors.VariableNotDefined;
import pc.compiler.symbolTable.SymbolTableNode;
import pc.parser.PCBaseVisitor;
import pc.parser.PCParser.AddContext;
import pc.parser.PCParser.DecimalContext;
import pc.parser.PCParser.DigitContext;
import pc.parser.PCParser.DivideContext;
import pc.parser.PCParser.LastVariableContext;
import pc.parser.PCParser.LineContext;
import pc.parser.PCParser.MultipleVariableContext;
import pc.parser.PCParser.MultiplyContext;
import pc.parser.PCParser.PrintContext;
import pc.parser.PCParser.PrintlnContext;
import pc.parser.PCParser.ProgramContext;
import pc.parser.PCParser.SubtractContext;
import pc.parser.PCParser.VariableContext;

public class Compiler extends PCBaseVisitor<String>{

	private File file = null;
	private FileWriter fw = null;
	private char type;
	private HashMap<String,SymbolTableNode> symbolTable = new HashMap<>();
	private int lineNumber = 1;
	String begPrint = "\ngetstatic java/lang/System/out Ljava/io/PrintStream;"; 
	String endPrint = "\ninvokevirtual java/io/PrintStream/print";
	
	public Compiler(String fileName) throws IOException {
		file = new File(fileName);
		fw = new FileWriter(file);
		String temp = "\n.class public Demo\n.super java/lang/Object" + 
						"\n.method static public main([Ljava/lang/String;)V" + 
						"\n.limit stack 100\n.limit locals 100";
		fw.write(temp);
	}
	
	public void appendToFile(String instructions) {
		try {
			fw.write(instructions);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public String visitProgram(ProgramContext ctx) {
		visitChildren(ctx);
		try {
			fw.write("\nreturn\n.end method");
			fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public String visitPrint(PrintContext ctx) {
		appendToFile(begPrint);
		visit(ctx.exp);
		appendToFile(endPrint + "(" + Character.toUpperCase(type) + ")V");
		return null;
	}
	
	public String visitPrintln(PrintlnContext ctx) {
		appendToFile(begPrint);
		visit(ctx.exp);
		appendToFile(endPrint + "ln(" + Character.toUpperCase(type) + ")V");
		return null;
	}
	
	public String visitAdd(AddContext ctx) {
		visitChildren(ctx);
		appendToFile("\n" + Character.toLowerCase(type) + "add");
		return null;
	}
	
	public String visitSubtract(SubtractContext ctx) {
		visitChildren(ctx);
		appendToFile("\n" + Character.toLowerCase(type) + "sub");
		return null;
	}
	
	public String visitMultiply(MultiplyContext ctx) {
		visitChildren(ctx);
		appendToFile("\n" + Character.toLowerCase(type) + "mul");
		return null;
	}
	
	public String visitDivide(DivideContext ctx) {
		visitChildren(ctx);
		appendToFile("\n" + Character.toLowerCase(type) + "div");
		return null;
	}
	
	public String visitDigit(DigitContext ctx) {
		if(!(type=='f'))
			type = 'i';
		appendToFile("\nldc " + ctx.digit.getText());
		if(type=='f')
			appendToFile("\ni2f");
		return null;
	}
	
	public String visitDecimal(DecimalContext ctx) {
		if(type=='i')
			appendToFile("\ni2f");
		type = 'f';
		appendToFile("\nldc " + ctx.decimal.getText());
		return null;
	}
	
	public String visitVariable(VariableContext ctx) {
		if(symbolTable.get(ctx.var.getText())!=null)
			appendToFile("\n" + Character.toLowerCase(type) + "load " + symbolTable.get(ctx.var.getText()));
		else 
			throw new VariableNotDefined(ctx.getText(), ctx.var.getText(), lineNumber);
		return null;
	}
	
	public String visitLine(LineContext ctx) {
		lineNumber++;
		return null;
	}
	
	public String visitMultipleVariable(MultipleVariableContext ctx) {
		return null;
	}
	
	public String visitLastVariable(LastVariableContext ctx) {
		visit(ctx.exp);
		if(symbolTable.get(ctx.var.getText())==null) {
			symbolTable.put(ctx.var.getText(), new SymbolTableNode(ctx.var.getText(), Character.toString(type)));
			System.out.println(symbolTable.get(ctx.var.getText()));
		}
		else
			throw new VariableAlreadyDefined(ctx.getText(), ctx.var.getText(), lineNumber);
		appendToFile("\n" + Character.toLowerCase(type) + "store " + symbolTable.get(ctx.var.getText()));
		return null;
	}
	
}
